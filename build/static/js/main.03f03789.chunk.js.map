{"version":3,"sources":["Task.js","App.js","serviceWorker.js","config.js","index.js"],"names":["props","task","editTask","deleteTask","id","name","Card","style","width","Body","Title","Subtitle","className","Text","Button","variant","onClick","App","useState","tasks","setTasks","setName","useEffect","retriverData","firestore","collection","onSnapshot","snapshot","console","log","docs","mytask","map","d","data","doc","set","delete","type","onChange","e","target","value","length","toString","text","index","Task","key","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAIe,WAAAA,GAAU,IACbC,EAA+BD,EAA/BC,KAAMC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WAChBC,EAAaH,EAAbG,GAAIC,EAASJ,EAATI,KAEZ,OACI,6BACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,UAClB,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACH,EAAA,EAAKI,MAAN,4BACA,kBAACJ,EAAA,EAAKK,SAAN,CAAeC,UAAU,mBAAzB,MAA+CR,GAC/C,kBAACE,EAAA,EAAKO,KAAN,aACUR,GAEV,kBAACS,EAAA,EAAD,CAAQC,QAAQ,iBAAiBC,QAAS,kBAAMb,EAAWC,KAA3D,UACA,kBAACU,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAAS,kBAAMd,EAASE,KAA1D,cCuDLa,MAlEf,WAAgB,IAAD,EAEaC,mBAAS,CACjC,CAAEd,GAAI,EAAGC,KAAM,eACf,CAAED,GAAI,EAAGC,KAAM,mBAJJ,mBAENc,EAFM,KAECC,EAFD,OAOWF,mBAAS,IAPpB,mBAONb,EAPM,KAOAgB,EAPA,KASbC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAe,WACnBC,EAAUC,WAAW,QAAQC,YAAW,SAACC,GACvCC,QAAQC,IAAIF,EAASG,MACrB,IAAIC,EAASJ,EAASG,KAAKE,KAAI,SAAAC,GAAM,IAAD,EACbA,EAAEC,OACvB,MAAO,CAAE9B,GAFyB,EAC1BA,GACKC,KAFqB,EACtBA,SAGde,EAASW,OAuBP7B,EAAW,SAACE,GAChBoB,EAAUC,WAAW,QAAQU,IAAI/B,EAAK,IAAIgC,IAAI,CAAEhC,KAAIC,UAEhDF,EAAa,SAACC,GAClBoB,EAAUC,WAAW,QAAQU,IAAI/B,EAAK,IAAIiC,UAG5C,OACE,6BACE,6BACE,2BAAOC,KAAK,OAAOjC,KAAK,OAAOkC,SAAU,SAACC,GAAD,OAAOnB,EAAQmB,EAAEC,OAAOC,UACjE,6BACE,kBAAC5B,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QA/B1B,WACd,IAAIZ,EAAuB,IAAjBe,EAAMwB,OAAgB,EAAIxB,EAAMA,EAAMwB,OAAS,GAAGvC,GAAK,EACjEoB,EAAUC,WAAW,QAAQU,IAAI/B,EAAGwC,YAAYR,IAAI,CAAEhC,KAAIC,WA6BpD,SAGJ,yBAAKO,UAAU,iCA3BbO,GAASA,EAAMwB,OACTxB,EAAMa,KAAI,SAACa,EAAMC,GACvB,OACE,kBAACC,EAAD,CAAMC,IAAKF,EAAO7C,KAAM4C,EAAM1C,WAAYA,EAAYD,SAAUA,OAO5D,4CCpCM+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAWeC,EAXA,CACXC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gB,gBCRnB,0CAS4B,IAAxBC,OAAcpB,QACdoB,gBAAuBT,GAEhB,IAAM9B,EAAYuC,cAE7BC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SFqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.03f03789.chunk.js","sourcesContent":["import React from 'react'\r\n// import './Task.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Card } from 'react-bootstrap';\r\nexport default props => {\r\n    const { task, editTask, deleteTask } = props\r\n    const { id, name } = task\r\n\r\n    return (\r\n        <div>\r\n            <Card style={{ width: '18rem' }}>\r\n                <Card.Body>\r\n                    <Card.Title>React-firebase CRUD</Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">ID:{id}</Card.Subtitle>\r\n                    <Card.Text>\r\n                        Name:{name}\r\n                    </Card.Text>\r\n                    <Button variant=\"outline-danger\" onClick={() => deleteTask(id)}>Delete</Button>\r\n                    <Button variant=\"outline-success\" onClick={() => editTask(id)}>Update</Button>\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react'\nimport { firestore } from './index'\nimport 'firebase/firestore'\nimport Task from './Task'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button } from 'react-bootstrap';\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([\n    { id: 1, name: \"do homework\" },\n    { id: 2, name: \"write node js\" }\n  ]);\n\n  const [name, setName] = useState('')\n\n  useEffect(() => {\n    retriverData()\n  }, [])\n\n  const retriverData = () => {\n    firestore.collection(\"task\").onSnapshot((snapshot) => {\n      console.log(snapshot.docs)\n      let mytask = snapshot.docs.map(d => {\n        const { id, name } = d.data()\n        return { id, name }\n      })\n      setTasks(mytask)\n    })\n  }\n\n  const addTask = () => {\n    let id = (tasks.length === 0) ? 1 : tasks[tasks.length - 1].id + 1\n    firestore.collection(\"task\").doc(id.toString()).set({ id, name })\n  }\n\n\n  const renderTask = () => {\n    if (tasks && tasks.length) {\n      return (tasks.map((text, index) => {\n        return (\n          <Task key={index} task={text} deleteTask={deleteTask} editTask={editTask} />\n        )\n      }\n      )\n      )\n    }\n    else\n      return (<ll> No task </ll>)\n  }\n  const editTask = (id) => {\n    firestore.collection(\"task\").doc(id + '').set({ id, name })\n  }\n  const deleteTask = (id) => {\n    firestore.collection(\"task\").doc(id + '').delete()\n  }\n\n  return (\n    <div>\n      <div>\n        <input type=\"text\" name=\"name\" onChange={(e) => setName(e.target.value)} />\n        <div>\n          <Button variant=\"outline-primary\" onClick={addTask}>Add</Button>\n        </div>\n      </div>\n      <div className=\"d-flex justify-content-center\">\n        {\n          renderTask()\n        }\n      </div>\n    </div>\n  );\n}\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const config = {\r\n    apiKey: \"AIzaSyCNssSG1hOFstrFtD4kk4IvrlkNmTaqycc\",\r\n    authDomain: \"lab-8-dcw.firebaseapp.com\",\r\n    databaseURL: \"https://lab-8-dcw.firebaseio.com\",\r\n    projectId: \"lab-8-dcw\",\r\n    storageBucket: \"lab-8-dcw.appspot.com\",\r\n    messagingSenderId: \"905798570341\",\r\n    appId: \"1:905798570341:web:ef15bbb6bf5078e32fd18c\",\r\n    measurementId: \"G-4BTKCXHCZG\"\r\n  };\r\n  \r\nexport default config","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport config from './config'\nimport 'firebase/firebase'\nimport * as firebase from 'firebase';\n\nif (firebase.apps.length ===0)\n    firebase.initializeApp(config)\n\n    export const firestore = firebase.firestore()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}